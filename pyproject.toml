[project]
name = "blacksheep-msgpack-starter"

[tool.poetry]
name = "blacksheep-msgspeck-starter"
version = "0.1.0"
package-mode = false
description = ""
authors = ["Galtozzy <galtozzy+git@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
blacksheep = "^2.0.7"
uvicorn = "^0.32.0"
uvloop = "^0.20.0"
pydantic-settings = "^2.7.0"
markupsafe = "^3.0.2"
pydantic = "^2.9.2"
msgspec = "^0.18.6"
gunicorn = "^23.0.0"


[tool.poetry.group.dev.dependencies]
ipython = "^8.29.0"
rich = "^13.9.3"
pytest = "^8.3.3"
pytest-mock = "^3.14.0"
pytest-cov = "^5.0.0"
taskipy = "^1.14.0"
mypy = "^1.13.0"
coverage = "^7.6.4"
pytest-asyncio = "^0.24.0"
pytest-socket = "^0.7.0"
ruff = "^0.7.1"

[tool.taskipy.tasks]
format-and-lint = "task ruff && task mypy-lint"

ruff = "ruff format ./app/ ./docker/ ./tests/ && ruff check ./app/ ./docker/ ./tests/ --fix --unsafe-fixes"
tests = "PYTHONPATH=. pytest tests/ -v"

ruff-lint = "ruff check ./app"
mypy-lint = "mypy --install-types --non-interactive ./app/"
poetry-check = "poetry check"
pip-check = "pip check"

[tool.ruff]
line-length = 120
extend-exclude = ["site-packages", "*.pyi"]
target-version = 'py312'


[tool.ruff.lint]
fixable = ["ALL"]
unfixable = []
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = 'single'
indent-style = 'space'
line-ending = 'auto'
skip-magic-trailing-comma = false
exclude = ['*.pyi']

[tool.ruff.lint.mccabe]
max-complexity = 6

[tool.ruff.lint.isort]
split-on-trailing-comma = false
lines-after-imports = 2
known-first-party = ["app"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true

[tool.mypy]
# Mypy configuration:
# https://mypy.readthedocs.io/en/latest/config_file.html
strict = true
pretty = true

exclude = [
    'test_',
]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true


[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    '--strict-markers',
    '--strict-config',
    '--allow-unix-socket',
    '--allow-hosts=127.0.0.1,127.0.1.1,::1',
    '--tb=short',
    '--cov=app/',
    '--cov-branch',
    '--cov-report=term-missing:skip-covered',
    '--cov-report=html',
    '--cov-fail-under=80',
]
asyncio_mode = "auto"
python_files = "test*.py"
# Directories that are not visited by pytest collector:
norecursedirs = "*.egg .eggs dist build docs .tox .git __pycache__ config docker etc"
testpaths = [
    "tests",
]

[tool.coverage.run]
# Coverage configuration:
# https://coverage.readthedocs.io/en/latest/config.html
omit = []
concurrency = ['thread']


[tool.coverage.report]
omit = [
]

exclude_lines = [
    'pragma: no cover',
    '@abstract',
    'def __repr__',
    'raise AssertionError',
    'raise NotImplementedError',
    'if __name__ == .__main__.:',
    '__all__',
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
